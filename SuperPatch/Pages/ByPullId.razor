@page "/bromite/pull/{PullIdFromUrl:int}"

@inherits CommonComponentBase

@inject HttpClient httpClient
@inject Core.Services.WorkspaceService workspaceService
@inject Core.GitHubApi.ApiService githubApi

@code {
  [Parameter]
  public int PullIdFromUrl { get; set; } = 0;
}

@if (workspace == null)
{
  if (errorString == null)
  {
    <Spin></Spin>
  }
  else
  {
    <h3>@errorString</h3>
  }
}
else
{
  @*<h3>@(pull.title)</h3>*@
  <CommitViewer Workspace="workspace"></CommitViewer>
}

@code {

  Workspace workspace;
  string errorString;
  Core.GitHubApi.PullRequest pull;

  protected override async Task OnInitializedAsync()
  {
    if (PullIdFromUrl == 0)
    {
      errorString = "Invalid url";
    }
    else
    {
      pull = await githubApi.GetPullRequest("bromite/bromite", PullIdFromUrl);
      if (pull == null)
      {
        errorString = $"Invalid pull id {PullIdFromUrl}";
      }
      else
      {
        var result = await workspaceService.LoadBySha(Core.Services.RepoType.Bromite, pull.head.sha);
        if (result.IsOk == false)
          errorString = result.Message;
        else
        {
          workspace = result.Result;

          var files = await githubApi.GetPullRequestFiles("bromite/bromite", PullIdFromUrl);
          workspace.PatchsSet.AddRange(files.Select(pullRequestFile => new PatchFile()
          {
            FileName = System.IO.Path.GetFileName(pullRequestFile.filename),
            Diff = null,
            LoadDelegate = async (patchFile) =>
            {
              try
              {
                var fileContents = await githubApi.GetPullRequestFiles(pullRequestFile);

                var contents = (await httpClient.GetStringAsync(fileContents.download_url))
                                .Split('\n')
                                .Where(x => !Workspace.IsLineToRemove(x))
                                .ToList();
                return DiffPatch.DiffParserHelper.Parse(String.Join('\n', contents));
              }
              catch (System.Exception ex)
              {
                Console.WriteLine(ex.Message);
                return null;
              }
            }
          }).ToList());

          await workspace.EnsureLoadAllPatches(new SuperPatch.Core.Status.NoopStatusDelegate());
        }

        this.StateHasChanged();

        if (workspace != null)
          await workspaceService.LoadIfPullRequest(workspace);
      }
    }

    base.OnInitialized();
  }
}